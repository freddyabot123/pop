
import logging
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram import F

from handlers.prog_fullbody2 import register_fullbody2_handlers, muscle_sequence as fullbody_sequence
from handlers.prog_fullbody3 import register_fullbody3_handlers
from handlers.prog_hybrid3 import register_hybrid3_handlers, muscle_sequence_day1, muscle_sequence_day2, muscle_sequence_day3
from handlers.prog_upperlower2 import register_upperlower2_handlers, muscle_sequence_day1 as ul_day1, muscle_sequence_day2 as ul_day2, muscle_sequence_day3 as ul_day3, muscle_sequence_day4 as ul_day4
from handlers.prog_ap2 import register_pushpull2_handlers, muscle_sequence_day1 as ap_day1, muscle_sequence_day2 as ap_day2
import settings.markups as nav
import settings.config as cfg
from utils import check_sub, are_markups_equal
from storage import user_program

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

bot = Bot(
    token=cfg.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

async def send_split_message(bot, chat_id: int, text: str, reply_markup=None):
    MAX_MESSAGE_LENGTH = 4000
    logger.debug(f"Sending message to chat {chat_id}, length: {len(text)}")
    if len(text) <= MAX_MESSAGE_LENGTH:
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        return
    lines = text.split("\n")
    current_chunk = ""
    for line in lines:
        if len(current_chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH:
            logger.debug(f"Sending chunk of length {len(current_chunk.strip())} for chat {chat_id}")
            await bot.send_message(chat_id=chat_id, text=current_chunk.strip())
            current_chunk = ""
        current_chunk += line + "\n"
    if current_chunk.strip():
        logger.debug(f"Sending final chunk of length {len(current_chunk.strip())} for chat {chat_id}")
        await bot.send_message(chat_id=chat_id, text=current_chunk.strip(), reply_markup=reply_markup)

async def format_day(day_num: int, day_name: str, exercises: list, muscle_seq: list, sets_reps: str, is_multi_day: bool = True):
    prefix = f"{day_num}Ô∏è‚É£ <b>–î–µ–Ω—å {day_num} ({day_name})</b>\n" if is_multi_day else ""
    day_text = prefix
    muscle_groups = {}
    subgroup_to_group = {}
    nested_subgroups = {"–ö–≤–∞–¥—Ä–∏—Ü–µ–ø—Å—ã": [], "–ë–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞": []}
    for group, subgroup, count in muscle_seq:
        if isinstance(count, list):
            for sub_subgroup, _ in count:
                subgroup_to_group[sub_subgroup] = group
                nested_subgroups[subgroup].append(sub_subgroup)
        else:
            subgroup_to_group[subgroup] = group
    for exercise in exercises:
        try:
            subgroup, exercise_name = exercise.split(": ", 1)
            muscle_group = subgroup_to_group.get(subgroup, "–ü—Ä–æ—á–µ–µ")
            if muscle_group not in muscle_groups:
                muscle_groups[muscle_group] = {}
            if subgroup not in muscle_groups[muscle_group]:
                muscle_groups[muscle_group][subgroup] = []
            muscle_groups[muscle_group][subgroup].append(exercise_name)
        except ValueError:
            logger.warning(f"Invalid exercise format: {exercise}")
            muscle_group = "–ü—Ä–æ—á–µ–µ"
            if muscle_group not in muscle_groups:
                muscle_groups[muscle_group] = {}
            if "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" not in muscle_groups[muscle_group]:
                muscle_groups[muscle_group]["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"] = []
            muscle_groups[muscle_group]["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"].append(exercise)
    for muscle_group in muscle_groups:
        day_text += f"\nüí™ <b>{muscle_group}</b>\n"
        if muscle_group == "–ù–æ–≥–∏" and is_multi_day:
            for parent_subgroup in ["–ö–≤–∞–¥—Ä–∏—Ü–µ–ø—Å—ã", "–ë–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞"]:
                if any(sub in muscle_groups[muscle_group] for sub in nested_subgroups[parent_subgroup]):
                    day_text += f"  ‚û°Ô∏è <b><i>{parent_subgroup}</i></b>\n"
                    for subgroup in sorted(nested_subgroups[parent_subgroup]):
                        if subgroup in muscle_groups[muscle_group]:
                            day_text += f"    ‚û°Ô∏è <b><i>{subgroup}</i></b>\n"
                            for exercise in muscle_groups[muscle_group][subgroup]:
                                day_text += f"      ‚Ä¢ {exercise} ({sets_reps})\n"
            other_subgroups = [sub for sub in muscle_groups[muscle_group] if sub not in sum(nested_subgroups.values(), [])]
            for subgroup in sorted(other_subgroups):
                day_text += f"  ‚û°Ô∏è <b><i>{subgroup}</i></b>\n"
                for exercise in muscle_groups[muscle_group][subgroup]:
                    day_text += f"    ‚Ä¢ {exercise} ({sets_reps})\n"
        else:
            for subgroup in sorted(muscle_groups[muscle_group].keys()):
                day_text += f"  ‚û°Ô∏è <b><i>{subgroup}</i></b>\n"
                for exercise in muscle_groups[muscle_group][subgroup]:
                    day_text += f"    ‚Ä¢ {exercise} ({sets_reps})\n"
    logger.debug(f"Formatted day {day_num} ({day_name}) text length: {len(day_text)}")
    return day_text

async def display_program(message: types.Message, user_id: str, first_name: str) -> bool:
    logger.debug(f"Checking user_program for user {user_id}: {user_program.get(user_id)}")
    if user_id not in user_program or not user_program[user_id].get("program"):
        logger.info(f"No program found for user {user_id}")
        return False

    program = user_program[user_id]
    days = program.get('days', 2)
    sets_reps = program.get('sets_reps', '3 –ø–æ–¥—Ö–æ–¥–∞, 3-8 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π')
    program_type = program.get('type', 'Unknown')
    logger.info(f"Displaying program for user {user_id}: type={program_type}, days={days}")

    intro_text = (
        "üò≤ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Å–ø–æ—Ä—Ç—Å–º–µ–Ω, –æ—á–µ–Ω—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!\n\n"
        "üìù <i>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, –Ω–∞—á–∏–Ω–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –º—ã—à—Ü—ã, "
        "–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è, –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Å–≤–æ–µ–º—É –≤—ã–±–æ—Ä—É.</i>\n"
        "üí° <i>–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä–µ–º, –¥–æ–±–∞–≤–ª—è–π! –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–≤–æ–µ —Ç–µ–ª–æ —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç, –Ω–µ –Ω–∞–≥—Ä—É–∂–∞–π —Å–µ–±—è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫.</i>\n\n"
        f"üèãÔ∏è <b>–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n"
        f"üìÖ –¢–∏–ø: {program_type}\n"
        f"üóì –î–Ω–µ–π: {days}\n"
    )
    footer_text = (
        "\nüí° –¢–µ—Ö–Ω–∏–∫–∞: <a href='https://t.me/+IkIXHNQL3vgyYzQ8'>–¢—É—Ç–æ—Ä—ã–ó–∞–º–µ–Ω—ã</a>\n"
        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä: /programma\n"
        "üî• –£–¥–∞—á–∏!"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="clear_program")]
    ])

    # Handle FullBody programs (list-based)
    if isinstance(program["program"], list) and program_type in ["FullBody 2.0", "FullBody 3.0"]:
        response = intro_text + f"‚ÑπÔ∏è <i>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.</i>\n\n<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n"
        day_text = await format_day(1, "", program["program"], fullbody_sequence, sets_reps, is_multi_day=False)
        response += day_text
        await send_split_message(bot, message.chat.id, response + footer_text, reply_markup=markup)
        logger.info(f"Displayed {program_type} program for user {user_id}")
        return True

    # Handle multi-day programs (dict-based)
    if isinstance(program["program"], dict):
        if program_type == "3 day –≥–∏–±—Ä–∏–¥ –≤–µ—Ä—Ö/–Ω–∏–∑–∞ –∏ —Ñ—É–ª–±–∞–¥–∏":
            days_config = [
                (1, "–§—É–ª–±–∞–¥–∏", program["program"]["day1"], muscle_sequence_day1),
                (2, "–í–µ—Ä—Ö", program["program"]["day2"], muscle_sequence_day2),
                (3, "–ù–∏–∑", program["program"]["day3"], muscle_sequence_day3)
            ]
        elif program_type == "4 day –≤–µ—Ä—Ö/–Ω–∏–∑":
            days_config = [
                (1, "–í–µ—Ä—Ö", program["program"]["day1"], ul_day1),
                (2, "–ù–∏–∑", program["program"]["day2"], ul_day2),
                (3, "–í–µ—Ä—Ö", program["program"]["day3"], ul_day3),
                (4, "–ù–∏–∑", program["program"]["day4"], ul_day4)
            ]
        elif program_type == "4 day –ø–µ—Ä–µ–¥/–∑–∞–¥":
            days_config = [
                (1, "–ü–µ—Ä–µ–¥", program["program"]["day1"], ap_day1),
                (2, "–ó–∞–¥", program["program"]["day2"], ap_day2),
                (3, "–ü–µ—Ä–µ–¥", program["program"]["day3"], ap_day1),
                (4, "–ó–∞–¥", program["program"]["day4"], ap_day2)
            ]
        else:
            logger.warning(f"Unknown dict-based program type: {program_type} for user {user_id}")
            return False

        for idx, (day_num, day_name, exercises, muscle_seq) in enumerate(days_config):
            day_text = await format_day(day_num, day_name, exercises, muscle_seq, sets_reps)
            text = (intro_text + "\n" + day_text) if idx == 0 else day_text
            reply_markup = markup if idx == len(days_config) - 1 else None
            footer = footer_text if idx == len(days_config) - 1 else ""
            await send_split_message(bot, message.chat.id, text + footer, reply_markup=reply_markup)
        logger.info(f"Displayed {program_type} program for user {user_id}")
        return True

    logger.warning(f"Invalid program structure for user {user_id}: {program}")
    return False

@dp.message(Command("tutorials"))
async def tutorials_cmd(message: types.Message):
    await message.answer_photo(
        photo=FSInputFile(cfg.tutorials_image),
        caption=(
            "üé• <b>–¢—É—Ç–æ—Ä—ã –∏ –∑–∞–º–µ–Ω—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</b>\n"
            "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n"
            "<a href='https://t.me/+IkIXHNQL3vgyYzQ8'>–¢—É—Ç–æ—Ä—ã–ó–∞–º–µ–Ω—ã</a>"
        ),
        reply_markup=nav.get_tutorials_btn()
    )

class DonateStates(StatesGroup):
    waiting_for_amount = State()

@dp.message(Command("donate"))
async def donate_cmd(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_donate")]
    ])
    await message.answer_photo(
        photo=FSInputFile(cfg.donate_image),
        caption=(
            "üí∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠êÔ∏è –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
        ),
        reply_markup=markup
    )
    await state.set_state(DonateStates.waiting_for_amount)

@dp.message(DonateStates.waiting_for_amount, F.text.regexp(r"^\d+$"))
async def process_amount(message: types.Message, state: FSMContext):
    amount = int(message.text)
    if amount < 1:
        await message.answer("‚ùó –ú–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    price = [LabeledPrice(label=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount} ‚≠êÔ∏è", amount=amount)]
    try:
        await bot.send_invoice(
            chat_id=message.chat.id,
            title=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount} ‚≠êÔ∏è",
            description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!",
            payload=f"donate_{amount}_stars",
            provider_token="",  # Update with your provider token
            currency="XTR",
            prices=price,
            start_parameter="donate_stars"
        )
        await state.clear()
    except TelegramBadRequest as e:
        logger.error(f"Error sending invoice: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "cancel_donate")
async def cancel_donate_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        logger.warning(f"Failed to delete message: {e}")

    await callback.message.answer("‚ùå –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\nüí™ –ß—Ç–æ –¥–∞–ª—å—à–µ? /programma")
    await state.clear()
    await callback.answer()

@dp.pre_checkout_query()
async def checkout(pre_q: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_q.id, ok=True)
    except Exception as e:
        logger.error(f"Error in pre-checkout: {e}")
        await bot.answer_pre_checkout_query(pre_q.id, ok=False, error_message="Payment error")

@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def payment_done(message: types.Message):
    amount = message.successful_payment.total_amount
    await message.answer(
        f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ {amount} ‚≠êÔ∏è!</b>\n"
        "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! üí™",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    first_name = callback.from_user.first_name or "User"

    is_subscribed = await check_sub(cfg.CHANNEL, user_id)
    logger.info(f"User {user_id} subscription check result: {is_subscribed}")

    if is_subscribed:
        text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n"
            f"{cfg.START_MESS_SUB}\n"
            "üî• –ì–æ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?"
        )
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèãÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å/–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="start_programma")]
        ])
    else:
        text = (
            f"‚ùó <b>{first_name}, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!</b>\n"
            f"{cfg.NOT_SUB_MESS}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."
        )
        markup = nav.get_channel_btn()

    current_text = callback.message.text or ""
    current_markup = callback.message.reply_markup

    markup_equal = are_markups_equal(markup, current_markup)
    logger.debug(f"Text changed: {text != current_text}, Markup equal: {markup_equal}")

    if text != current_text or not markup_equal:
        try:
            if callback.message.text:
                await callback.message.edit_text(text, reply_markup=markup)
            elif callback.message.caption:
                await callback.message.edit_caption(caption=text, reply_markup=markup)
            else:
                await callback.message.answer(text, reply_markup=markup)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logger.debug(f"Skipped edit for user {user_id}: message not modified")
            else:
                logger.warning(f"Error editing message for user {user_id}: {e}")
        except Exception as e:
            logger.warning(f"Unexpected error editing message for user {user_id}: {e}")
    await callback.answer()

@dp.callback_query(F.data == "start_programma")
async def start_programma_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    first_name = callback.from_user.first_name or "User"

    logger.info(f"Start programma callback for user {user_id}")

    if not await check_sub(cfg.CHANNEL, user_id):
        await callback.message.edit_caption(
            caption=(
                f"‚ùó <b>{first_name}, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!</b>\n"
                f"{cfg.NOT_SUB_MESS}"
            ),
            reply_markup=nav.get_channel_btn()
        )
        await callback.answer()
        return

    if await display_program(callback.message, user_id, first_name):
        await callback.answer()
        return

    await callback.message.answer(
        "üèãÔ∏è <b>–°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>\n"
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –≥–æ—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=nav.get_days_keyboard()
    )
    await state.set_state(TrainingProgramStates.choosing_days)
    await callback.answer()

@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    first_name = message.from_user.first_name or "User"
    logger.info(f"Start command received for user {user_id}")

    if message.chat.type == "private":
        if await check_sub(cfg.CHANNEL, user_id):
            await message.answer_photo(
                photo=FSInputFile(cfg.start_image),
                caption=(
                    f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n"
                    f"{cfg.START_MESS_SUB}\n"
                    "üî• –ì–æ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üèãÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å/–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="start_programma")]
                ])
            )
        else:
            await message.answer_photo(
                photo=FSInputFile(cfg.start_image),
                caption=(
                    f"‚ùó <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n"
                    f"{cfg.NOT_SUB_MESS}"
                ),
                reply_markup=nav.get_channel_btn()
            )

class TrainingProgramStates(StatesGroup):
    choosing_days = State()
    choosing_program = State()

@dp.message(Command("programma"))
async def programma_cmd(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    first_name = message.from_user.first_name or "User"

    logger.info(f"Programma command for user {user_id}: {user_program.get(user_id)}")

    if not await check_sub(cfg.CHANNEL, user_id):
        await message.answer_photo(
            photo=FSInputFile(cfg.start_image),
            caption=(
                f"‚ùó <b>{first_name}, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!</b>\n"
                f"{cfg.NOT_SUB_MESS}"
            ),
            reply_markup=nav.get_channel_btn()
        )
        return

    if await display_program(message, user_id, first_name):
        return

    logger.info(f"No valid program found for user {user_id}, proceeding to day selection")
    await message.answer(
        "üèãÔ∏è <b>–°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>\n"
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –≥–æ—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
        reply_markup=nav.get_days_keyboard()
    )
    await state.set_state(TrainingProgramStates.choosing_days)

@dp.callback_query(TrainingProgramStates.choosing_days, F.data.startswith("days_"))
async def handle_days_selection(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    await state.update_data(days=days)

    await callback.message.edit_text(
        f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ {days} –¥–Ω—è(–¥–Ω–µ–π)</b>\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã:",
        reply_markup=nav.get_program_keyboard(days)
    )
    await state.set_state(TrainingProgramStates.choosing_program)
    await callback.answer()

@dp.callback_query(TrainingProgramStates.choosing_program, F.data == "back_to_days")
async def handle_back_to_days(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TrainingProgramStates.choosing_days)
    await callback.message.edit_text(
        "üèãÔ∏è <b>–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é?</b>",
        reply_markup=nav.get_days_keyboard()
    )
    await callback.answer()

async def main():
    register_fullbody2_handlers(dp)
    register_fullbody3_handlers(dp)
    register_hybrid3_handlers(dp)
    register_upperlower2_handlers(dp)
    register_pushpull2_handlers(dp)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
